/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AboutPageService } from "../aboutPage.service";
import { AboutPageCreateInput } from "./AboutPageCreateInput";
import { AboutPage } from "./AboutPage";
import { AboutPageFindManyArgs } from "./AboutPageFindManyArgs";
import { AboutPageWhereUniqueInput } from "./AboutPageWhereUniqueInput";
import { AboutPageUpdateInput } from "./AboutPageUpdateInput";

export class AboutPageControllerBase {
  constructor(protected readonly service: AboutPageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AboutPage })
  async createAboutPage(
    @common.Body() data: AboutPageCreateInput
  ): Promise<AboutPage> {
    return await this.service.createAboutPage({
      data: data,
      select: {
        content: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AboutPage] })
  @ApiNestedQuery(AboutPageFindManyArgs)
  async aboutPages(@common.Req() request: Request): Promise<AboutPage[]> {
    const args = plainToClass(AboutPageFindManyArgs, request.query);
    return this.service.aboutPages({
      ...args,
      select: {
        content: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AboutPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async aboutPage(
    @common.Param() params: AboutPageWhereUniqueInput
  ): Promise<AboutPage | null> {
    const result = await this.service.aboutPage({
      where: params,
      select: {
        content: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AboutPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAboutPage(
    @common.Param() params: AboutPageWhereUniqueInput,
    @common.Body() data: AboutPageUpdateInput
  ): Promise<AboutPage | null> {
    try {
      return await this.service.updateAboutPage({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AboutPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAboutPage(
    @common.Param() params: AboutPageWhereUniqueInput
  ): Promise<AboutPage | null> {
    try {
      return await this.service.deleteAboutPage({
        where: params,
        select: {
          content: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
