/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AboutPage } from "./AboutPage";
import { AboutPageCountArgs } from "./AboutPageCountArgs";
import { AboutPageFindManyArgs } from "./AboutPageFindManyArgs";
import { AboutPageFindUniqueArgs } from "./AboutPageFindUniqueArgs";
import { CreateAboutPageArgs } from "./CreateAboutPageArgs";
import { UpdateAboutPageArgs } from "./UpdateAboutPageArgs";
import { DeleteAboutPageArgs } from "./DeleteAboutPageArgs";
import { AboutPageService } from "../aboutPage.service";
@graphql.Resolver(() => AboutPage)
export class AboutPageResolverBase {
  constructor(protected readonly service: AboutPageService) {}

  async _aboutPagesMeta(
    @graphql.Args() args: AboutPageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AboutPage])
  async aboutPages(
    @graphql.Args() args: AboutPageFindManyArgs
  ): Promise<AboutPage[]> {
    return this.service.aboutPages(args);
  }

  @graphql.Query(() => AboutPage, { nullable: true })
  async aboutPage(
    @graphql.Args() args: AboutPageFindUniqueArgs
  ): Promise<AboutPage | null> {
    const result = await this.service.aboutPage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AboutPage)
  async createAboutPage(
    @graphql.Args() args: CreateAboutPageArgs
  ): Promise<AboutPage> {
    return await this.service.createAboutPage({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AboutPage)
  async updateAboutPage(
    @graphql.Args() args: UpdateAboutPageArgs
  ): Promise<AboutPage | null> {
    try {
      return await this.service.updateAboutPage({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AboutPage)
  async deleteAboutPage(
    @graphql.Args() args: DeleteAboutPageArgs
  ): Promise<AboutPage | null> {
    try {
      return await this.service.deleteAboutPage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
